initSidebarItems({"enum":[["Async","Return type of future, indicating whether a value is ready or not."],["AsyncSink","The result of an asynchronous attempt to send a value to a sink."]],"fn":[["done","Creates a new \"leaf future\" which will resolve with the given result."],["empty","Creates a future which never resolves, representing a computation that never finishes."],["failed","Creates a \"leaf future\" from an immediate value of a failed computation."],["finished","Creates a \"leaf future\" from an immediate value of a finished and successful computation."],["lazy","Creates a new future which will eventually be the same as the one created by the closure provided."]],"macro":[["task_local","A macro to create a `static` of type `LocalKey`"],["try_ready","A macro for extracting the successful type of a `Poll<T, E>`."]],"mod":[["executor","Exeuctors"],["future","Futures"],["sink","Asynchronous sinks"],["stream","Asynchronous streams"],["sync","Future-aware synchronization"],["task","Tasks used to drive a future computation"]],"type":[["Poll","Return type of the `Future::poll` method, indicates whether a future's value is ready or not."],["StartSend","Return type of the `Sink::start_send` method, indicating the outcome of a send attempt. See `AsyncSink` for more details."]]});